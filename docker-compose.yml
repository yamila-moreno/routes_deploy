version: "3.3"

services:
  routes_db:
    image: postgres:9.6
    environment:
      - "POSTGRES_DB=routes"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - traefik-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  routes_api:
    image: ryms/routes_api:latest
    depends_on:
      - routes_db
    volumes:
      - static-data:/routes_api/static
    environment:
      POSTGRES_HOST: routes_db
      POSTGRES_USER: postgres
    command: >
       bash -c
       'export POSTGRES_DB=$$(< /run/secrets/POSTGRES_DB)
       && python manage.py migrate
       && python manage.py collectstatic --noinput
       && gunicorn project.wsgi -b 0.0.0.0:8000'
    networks:
      - traefik-net
    deploy:
      replicas: 3
      labels:
        - "traefik.backend=routes_api"
        - "traefik.port=8000"
        - "traefik.frontend.rule=Host:routes.com;PathPrefix:/api,/admin"
        - "traefik.enable=true"
    secrets:
      - POSTGRES_DB

  routes_front:
    image: ryms/routes_front:latest
    depends_on:
      - routes_api
    volumes:
      - static-data:/routes_api_static:ro
    networks:
      - traefik-net
    deploy:
      replicas: 3
      labels:
        - "traefik.backend=routes_front"
        - "traefik.port=9000"
        - "traefik.frontend.rule=Host:routes.com"
        - "traefik.enable=true"

  traefik:
    image: traefik
    command: --web --docker --docker.swarmmode --docker.watch --docker.domain=traefik --logLevel=DEBUG
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - traefik-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefk.toml
    labels:
      - "traefik.enable=false"
    deploy:
      placement:
        constraints:
          - node.role == manager

networks:
  traefik-net:
    driver: overlay


volumes:
  db-data:
    driver: local
  static-data:
    driver: local

secrets:
  POSTGRES_DB:
    external: true
